#+TITLE: ESPHome examples for the Heltec Wifi LoRa 32 V3 Board

* Contents                                                                 :TOC:
- [[#introduction][Introduction]]
  - [[#secrets][Secrets]]
  - [[#issue-status][Issue Status]]
- [[#process][Process]]
  - [[#install-tools-and-configure-the-environment][Install Tools and Configure the Environment]]
  - [[#create-configuration-file-yaml][Create Configuration File (yaml)]]
  - [[#compile-image][Compile Image]]
  - [[#install-image][Install Image]]
  - [[#view-logs][View Logs]]
- [[#development][Development]]
- [[#useful-links][Useful Links]]
- [[#examples][Examples]]
  - [[#simple-esphome-esp32s3yaml][simple-esphome-esp32s3.yaml]]
  - [[#heltecyaml][heltec.yaml]]
  - [[#customyaml][custom.yaml]]
  - [[#custom_lorayaml][custom_lora.yaml]]
  - [[#custom_lorawanyaml][custom_lorawan.yaml]]

* Introduction

The Heltec Wifi LoRa 32 V3 is based on the esp32s3 chip, with an additional LoRa
radio chip.

With an base ESPHome image installed on the board, which has wifi enabled, it is
possible to do further upgrades using Over-the-Air (OTA) updates using the
*esphome* tool, from the Linux command line.

The notes here refer to a ESPHome programming system installed on a Ubuntu
laptop (Version 22.04). It is also possible to use the ESPHome system installed
as a plugin in a Home Assistant installation on RasberryPi (compilation is just
little slower).

** Secrets
Passwords and Secrets (wifi and access point logins etc.) are stored in a
separate file (secrets.yaml) which only has a template stored in this repository.

#+NAME: secret.yaml
#+begin_src yaml
  # Your Wi-Fi SSID and password
  wifi_ssid: ""
  wifi_password: ""

  # Fallback Access Point Configuration Password
  wifi_ap_password: ""

  # API Key, used for accessing Home Assistant
  api_encryption_key: ""

  # Over-the-air update key
  ota_password: ""
#+end_src

There is a separate file in use for LoRaWAN credentials (lorawan_secrets.h)
which is being treated in a similar way.

** Issue Status
| Issue                       | Status  | Notes             |
|-----------------------------+---------+-------------------|
| Support in 'esphome wizard' | MISSING | Heltec V3 boards. |

* Process
See: https://esphome.io/guides/installing_esphome.html#linux

** Install Tools and Configure the Environment
*Note:* None of the following should be done with elevated privileges (eg, sudo)

Checkout this repository
#+begin_src shell
    git clone https://github.com/PaulSchulz/esphome-esp32s3.git
#+end_src

Check that correct version of python3 is available. Works with 3.10.7.
#+begin_src shell
  python3 --version
#+end_src

Setup the python environment
#+begin_src shell
  python3 -m venv venv
  source venv/bin/activate
#+end_src

Run the 'source venv/bin/activate' command to re-enter the environment.

Install esphome with
#+begin_src shell
  pip3 install esphome
#+end_src

*NOTE:* Over time, additional python dependencies will need to be installed. This may
happen automatically, but can also be done manually with 'pip install'. With the
virtual Python environment configured as above (look for the "(venv)" in the
command line prompt) additional python libraries will be installed in the
'venv/lib/python' subdirectory.

Once the installation is completed, check that esphome has been installed
correctly with the following.
#+begin_src shell
  esphome version
#+end_src

** Create Configuration File (yaml)
*** Configuration Wizard
#+begin_src shell
  esphome wizard basic.yaml
#+end_src

*ISSUE:* It appears as though the 'heltec-wifi-lora-32-v3' and
'esp32-s3-devkitc-1' arn't yet supported in the wizard.

*** Manually Create Configuration

** Compile Image
#+begin_src shell
  esphome compile heltec-wifi-lora-32-v3.yaml
#+end_src

** Install Image
Initial install via USB
#+begin_src shell
  esphome upload --device /dev/ttyUSB0 heltec-wifi-lora-32-v3.yaml
#+end_src

** View Logs
The logging from the device can be viewed over the USB serial connection when
connected with the following command:

#+begin_src shell
  esphome logs --device /dev/ttyUSB0
#+end_src

* Development
When creating the development environment as described above, the code for
'esphome' (the development tool) and 'esptool' (the device programmer) are
installed via pip in the 'venv/lib/python*' subdirectories.

For custom development 

* Useful Links
- ESPHome Customised Components :: https://esphome.io/custom/custom_component.html
- Custome Component Examples :: https://github.com/thegroove/esphome-custom-component-examples
  
* Examples
** simple-esphome-esp32s3.yaml
Simple example

** heltec.yaml
Example using more hardware specific options.
- Screen drawing enabled

** custom.yaml
This is a minimal custom build which responds in the logs with a 10s tick.

Files:
- custom.yaml
- my_custom_component.h

To build and install over a serial connection.
#+begin_src shell
  esphome run --device /def/ttyUSB0 custom.yaml
#+end_src

** custom_lora.yaml
This components sets up a ping/pong message exchange between two Heltec WiFo
LoRa 32 (V3) devices.

Files:
- custom_lora.yaml
- my_lora_component.h
  
To build and install over a serial connection.
#+begin_src shell
  esphome run --device /def/ttyUSB0 custom_lora.yaml
#+end_src

** custom_lorawan.yaml
This components sets up a Heltec Wifi LoRa 32(V3) board as a device on a LoRaWAN
network. Credentials for the device are set in 'lorawan_secrets.h'.

Files:
- custom_lorawan.yaml
- my_lorawan_component.h
- lorawan_secrets.h
  
To build and install over a serial connection, edit 'lorawan_secrets.h' and add
the devices cLoRaWAN credentials, then run the following to compile and install.
#+begin_src shell
  esphome run --device /def/ttyUSB0 custom_lorawan.yaml
#+end_src

